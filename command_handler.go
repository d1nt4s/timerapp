package main

import (
	"strings"

	"github.com/gdamore/tcell/v2"
)

// UI handling

func (a *App) handleCommand(cmd Command, cmd_string string) bool {
	switch cmd {
	case CmdExit:
		return true

	case CmdStart:
		settings, err := LoadSettings()
		if err != nil {
			userError(a.screen, "üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", false)
			return false
		}
		a.timer = NewTimer(settings.PomodoroMinutes, settings.PomodoroSeconds)
		a.startTimer()
	
	case CmdHelp:
		drawLongNotice(a.screen, "–£–ø—Ä–∞–≤–ª—è–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ç–∞–π–º–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: set_timer mm:ss - –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pomodoro, set_pause mm:ss - –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—É–∑—ã, set_longpause mm:ss - –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ª–≥–æ–π –ø–∞—É–∑—ã, set_interval {value} - —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ø–∞—É–∑ –±—É–¥–µ—Ç –¥–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥ —Ç–∞–π–º–µ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ help –≤ —Ä–µ–∂–∏–º–µ —Ç–∞–π–º–µ—Ä–∞.")

	case CmdSetPause, CmdSetTimer, CmdSetInterval, CmdSetLongPause:
		a.handleSetCommand(cmd_string)

	// case CmdSettings:
	// 	showSettingsModal(a)

	default:
		userError(a.screen, "‚≠î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ "+string(cmd), true)
	}

	return false
}

func (a *App) handleSetCommand(cmd string) {
	switch {
	case strings.HasPrefix(cmd, "set_timer"):
		a.updateSettingFromCommand(cmd, "set_timer", PomodoroSetting, true)

	case strings.HasPrefix(cmd, "set_pause"):
		a.updateSettingFromCommand(cmd, "set_pause", PauseSetting, false)

	case strings.HasPrefix(cmd, "set_longpause"):
		a.updateSettingFromCommand(cmd, "set_longpause", LongPauseSetting, false)

	case strings.HasPrefix(cmd, "set_interval"):
		a.updateSettingFromCommand(cmd, "set_interval", IntervalSetting, false)
	}
}

// Timer Handling

func (t *Timer) handleCommands(screen tcell.Screen) {
	select {
	case cmd := <-t.control:
		switch cmd {
		case CmdStop:
			t.status = Stopped
			clearBigTimerArea(screen)
			userNotice(screen, "‚èπ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", false)
		case CmdReset:
			settings, err := LoadSettings()
			if err != nil {
				userError(screen, "üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", false)
			}
			t.Set(settings.PomodoroMinutes, settings.PomodoroSeconds)
			userNotice(screen, "üîÅ –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω", true)
		case CmdPause:
			t.status = Paused
			userNotice(screen, "‚è∏ –¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ", false)
		case CmdResume:
			t.status = Continued
			userNotice(screen, "‚ñ∂Ô∏è –¢–∞–π–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è", true)
		case CmdExit:
			t.status = ExitApp
			userNotice(screen, "‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã", false)
		case CmdSkip:
			t.changeMode(screen)
			userNotice(screen, "–ü—Ä–æ–ø—É—Å–∫...", true)
		case CmdHelp:
			drawLongNotice(screen, "–£–ø—Ä–∞–≤–ª—è–π —Ç–∞–π–º–µ—Ä–æ–º —á–µ—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: stop - –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞, reset - –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞, pause - –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞, resume - –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞, exit - –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–∞–π–º–µ—Ä–∞, skip - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä.")
		default:
			userError(screen, "‚≠î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "+string(cmd), true)
		}
	default:
	}
}
