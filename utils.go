package main

import (
	"strconv"
	"strings"
	"fmt"
)

func (a *App) handleSetCommand(cmd string) {
	switch {
	case strings.HasPrefix(cmd, "set_timer"):
		a.updateSettingFromCommand(cmd, "set_timer", PomodoroSetting, true)

	case strings.HasPrefix(cmd, "set_pause"):
		a.updateSettingFromCommand(cmd, "set_pause", PauseSetting, false)

	case strings.HasPrefix(cmd, "set_interval"):
		a.updateSettingFromCommand(cmd, "set_interval", IntervalSetting, false)
	}
}

func (a *App) updateSettingFromCommand(cmd, prefix string, settingType SettingType, startAfter bool) {
	settings, err := LoadSettings()
	if err != nil {
		userError(a.screen, "üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", false)
		return
	}

	switch settingType {
	case PomodoroSetting, PauseSetting:
		min, sec, ok := parseTimeFromSetCommand(cmd, prefix)
		if !ok {
			userError(a.screen, fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s mm:ss", prefix), true)
			return
		}

		if settingType == PomodoroSetting {
			settings.PomodoroMinutes = min
			settings.PomodoroSeconds = sec
		} else {
			settings.PauseMinutes = min
			settings.PauseSeconds = sec
		}

		if startAfter && settingType == PomodoroSetting {
			a.timer = NewTimer(min, sec, Pomodoro)
			a.startTimer()
		}

	case IntervalSetting:
		val, ok := parseIntFromCommand(cmd, prefix)
		if !ok {
			userError(a.screen, "–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ set_interval {—á–∏—Å–ª–æ}, –ø—Ä–∏ 0 –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã –æ—Ç–∫–ª—é—á–∞—é—Ç—Å—è", true)
			return
		}
		settings.LongBreakInterval = val
	}

	if err := SaveSettings(settings); err != nil {
		userError(a.screen, "üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", false)
		return
	}

	userNotice(a.screen, "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", true)
}



func parseTimeFromSetCommand(input, prefix string) (int, int, bool) {
	trimmed := strings.TrimPrefix(input, prefix+" ")
	parts := strings.Split(trimmed, ":")
	if len(parts) != 2 {
		return 0, 0, false
	}
	min, err1 := strconv.Atoi(parts[0])
	sec, err2 := strconv.Atoi(parts[1])
	if err1 != nil || err2 != nil || min < 0 || sec < 0 || sec > 59 {
		return 0, 0, false
	}
	return min, sec, true
}

func parseIntFromCommand(input, prefix string) (int, bool) {
	trimmed := strings.TrimPrefix(input, prefix+" ")
	val, err := strconv.Atoi(trimmed)
	if err != nil || val < 0 {
		return 0, false
	}
	return val, true
}
