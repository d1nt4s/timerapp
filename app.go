package main

import (
	"log"

	"github.com/gdamore/tcell/v2"
)

type AppMode int

const (
	SetupMode AppMode = iota
	ActiveMode
)

type App struct {
	screen                 tcell.Screen
	timer                  *Timer
	uiCommandCh            chan string
	mode 				   AppMode					
}

func NewApp() *App {
	screen, err := tcell.NewScreen()
	if err != nil {
		log.Fatalf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞: %v", err)
	}
	if err := screen.Init(); err != nil {
		log.Fatalf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞: %v", err)
	}
	screen.EnableMouse()

	drawButtons(screen, getButtons(screen, SetupMode), tcell.StyleDefault.Foreground(tcell.ColorAqua).Bold(true))

	return &App{
		screen:      screen,
		timer: 	     NewTimer(1, 0),
		uiCommandCh: make(chan string),
		mode: 		 SetupMode,
	}
}

func (a *App) Run() {
	defer func() {
		close(a.uiCommandCh) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥ –¢–û–õ–¨–ö–û –∑–¥–µ—Å—å
		Debug("üü¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å—ã—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –∑–∞–∫—Ä—ã–ª—Å—è")
	}()

	userHello(a.screen, Msg_–≤–≤–µ–¥–∏—Ç–µ_–∫–æ–º–∞–Ω–¥—É_start_exit_help)
	// a.changeMode()

	// a.timer = NewTimer(1, 0)
	// a.mode = SetupMode

	// drawButtons(a.screen, getButtons(a.screen, a.mode), tcell.StyleDefault.Foreground(tcell.ColorAqua).Bold(true))

	go func() {
		defer func() {
			Debug("üü¢ scanCommand –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è")
		}()
		scanCommand(a)
	}()

Loop:

	for cmd := range a.uiCommandCh {
		if parsed, cleaned, ok := ParseCommand(cmd); ok {
			if a.mode == ActiveMode {
				// drawButtons(a.screen, getButtons(a.screen, a.mode), tcell.StyleDefault.Foreground(tcell.ColorAqua).Bold(true))
				a.timer.control <- parsed
			} else {
				if a.handleCommand(parsed, cleaned) {
					break Loop
				}
			}
		} else {
			userError(a.screen, "‚≠î –ö–æ–º–∞–Ω–¥–∞ \""+cleaned+"\" –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞", true)
		}
	}
}

func (a *App) startTimer() {

	a.changeMode()

	go func() {
		defer func() {
			a.changeMode()
			Debug("üü¢ timer.run –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è")
		}()

		for {
			result := a.timer.Run(a.screen)

			switch result {
			case TimerExitApp:
				a.uiCommandCh <- "exit"
				return
			case TimerStopped:
				userNotice(a.screen, "‚è± –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", true)
				userHint(a.screen, "üê≤ –í–≤–µ–¥–∏—Ç–µ 'start' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –∏–ª–∏ 'exit'", false)
				return
			case TimerFinished:
				continue
			}
		}

	}()
}

func (a *App) changeMode() {
	if (a.mode == SetupMode) {
		a.mode = ActiveMode
	} else {
		a.mode = SetupMode
	}

	clearButtonLine(a.screen)
	drawButtons(a.screen, getButtons(a.screen, a.mode), tcell.StyleDefault.Foreground(tcell.ColorAqua).Bold(true))
}
